<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

define('BALLADS_VIEWER_MIN_FONT_PX', 8);
define('BALLADS_VIEWER_PX_PER_MM', 8.0);

/**
 * Implements hook_menu().
 */
function ballads_viewer_menu() {
  return array(
    'admin/islandora/islandora_viewers/ballads_viewer' => array(
      'title' => 'Ballads XML Viewer',
      'description' => 'Configure the Ballads viewer.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('ballads_viewer_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ballads_viewer_theme() {
  return array(
    'ballads_viewer' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/ballads-viewer',
      'variables' => array(
        'islandora_object' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_viewer_info().
 */
function ballads_viewer_islandora_viewer_info() {
  return array(
    'ballads_viewer' => array(
      'label' => t('Ballads XML Viewer'),
      'description' => t('A simple XML viewer for the Lyrical Ballads.'),
      'configuration' => 'admin/islandora/islandora_viewers/ballads_viewer',
      'callback' => 'ballads_viewer_callback',
      'model' => array(
        'islandora:sp_simple_xml',
      ),
      'mimetype' => array('application/xml'),
    ),
  );
}

/**
 * Callback function for the viewer.
 *
 * @param array $params
 *   The params for the theme function 'ballads_viewer'.
 * @param IslandoraFedoraObject $islandora_object
 *   The object that we are viewing.
 *
 * @return string
 *   HTML repersentation of the Simple XML Viewer.
 */
function ballads_viewer_callback(array $params, IslandoraFedoraObject $islandora_object = NULL) {
  if (isset($islandora_object['OBJ']) && $islandora_object['OBJ']->mimetype == 'application/xml') {
    if (islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['OBJ'])) {
      return theme('ballads_viewer', array('islandora_object' => $islandora_object));
    }
  }
}

/**
 * Implements hook_cmodel_pid_islandora_view_object().
 *
 * Called only when showing the root of the ballads, I think.
 */
function ballads_viewer_islandora_collectioncmodel_islandora_view_object(AbstractObject $object) {
  if (!isset($object['OPTIONS'])) {
    return;
  }
  $options = parse_ini_string($object['OPTIONS']->content, TRUE);
  if (!isset($options['lyrical_ballads_viewer']) ||
      !isset($options['lyrical_ballads_viewer']['redirect_collection']) ||
      !$options['lyrical_ballads_viewer']['redirect_collection']) {
    return;
  }

  if (isset($options['lyrical_ballads_viewer']['collection_id']) && $options['lyrical_ballads_viewer']['collection_id'] === $object->id) {
    $index_pid = $options['lyrical_ballads_viewer']['index_pid'];
    drupal_goto('/islandora/object/' . $index_pid);
  }
}

/**
 * Convert a mm measurement (as found in a rend attribute) to a px measurement.
 * 
 * @param string $rend The contents of the render attribute
 * @param boolean $isFont If true, then the minimum font size is applied.
 * 
 * @return string The converted measurement with 'px' appended.
 */
function mmToPx($rend, $isFont) {
  $matches = array();
  if (!preg_match('/([0-9.]+)mm/i', $rend, $matches)) {
    error_log('unparseable measurement ' . $rend);
  }
  if ($isFont) {
    return max(array(BALLADS_VIEWER_MIN_FONT_PX, BALLADS_VIEWER_PX_PER_MM * $matches[1])) . 'px';
  }
  else {
    return BALLADS_VIEWER_PX_PER_MM * $matches[1] . 'px';
  }
}

/**
 * Convert a rend attribute to a CSS style.
 * 
 * @param string $rend Contents of the rend attribute.
 * @return string|null The converted CSS style or null if the attribute is unparseable.
 */
function rendToStyle($rend) {
  $matches = array();
  if (!preg_match('/^([a-z][a-z0-9-]*)/i', $rend, $matches)) {
    error_log('unparseable rendering ' . $rend);
    return NULL;
  }
  switch (strtolower($matches[1])) {
    case 'center':
    case 'centre':
      return 'text-align: center';

    case 'italic':
    case 'italics':
      return 'font-style: italic';

    case 'roman':
      return 'font-style: normal';

    case 'uppercase':
      return 'text-transform: uppercase';

    case 'font-size':
      return 'font-size: ' . mmToPx($rend, TRUE);

    case 'indent':
      return 'margin-left: ' . mmToPx($rend, FALSE);

    case 'length':
      return 'width: ' . mmToPx($rend, FALSE);

    default:
        error_log('unknown rendering: ' . $rend);
      return;
  }
}

// @TODO check that this is only being applied to the correct drupal pages.
// @TODO how do I get the proper address of the solr engine?
/**
 * Implements hook_islandora_view_object_alter to fix the problems in the HTML
 * caused by the limitations of XSLT 1.0. Fixes the following things:
 * 
 * The src attribute on image element.
 * 
 * Converts TEI rend attributes (stored in data-rend) to CSS styles.
 * 
 * Fixes links in the table of contents by finding the corresponding Islandora
 * object based on its MODS identifier.
 * 
 * @param TuqueObject $$object The object being viewed
 * @param Array $rendered The drupal render array.
 */
function ballads_viewer_islandora_view_object_alter(&$object, &$rendered) {
  if (!isset($rendered['']) || !isset($rendered['']['#markup'])) {
    return;
  }
  // $rendered contains serialized XHTML. It must be parsed before it can be
  // mangled with XPath.
  // loadHTML expects ISO-Latin-1. Add an encoding decl to get it right.
  $dom = new DOMDocument();
  $dom->loadHTML('<?xml encoding="UTF-8">' . $rendered['']['#markup']);
  
  // fix image links.
  foreach ($dom->getElementsByTagName('img') as $img) {
    $img->setAttribute('src', '/islandora/object/' . $object->id . '/' . $img->getAttribute('src'));
  }

  // fix nodes with TEI rend attributes.
  $xp = new DOMXpath($dom);
  foreach ($xp->query('//*[@data-rend]') as $node) {
    $rend = $node->getAttribute('data-rend');
    $styles = array_map('rendToStyle', preg_split('/\s+/', $rend));
    $node->setAttribute('style', implode('; ', $styles));
    $node->removeAttribute('data-rend');
  }

  // fix the Table of Contents.
  foreach ($xp->query('//a[@class="toc-link"]') as $node) {
    global $base_url;
    $filename = $node->getAttribute('href');
    // @TODO figure out the SOLR server address.
    $result = file_get_contents("http://142.58.130.243:8080/solr/select?version=1.2&wt=json&json.nl=map&q=mods_identifier_ms:%22{$filename}%22&rows=1&fl=PID&omitHeader=true");
    $json = json_decode($result, TRUE);
    $PID = $json['response']['docs'][0]['PID'];
    $node->setAttribute('href', "/islandora/object/{$PID}");
  }

  $rendered['']['#markup'] = $dom->saveHTML();
}
